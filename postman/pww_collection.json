{
	"info": {
		"_postman_id": "880af86a-e942-4e17-983f-ec6e07e91dbd",
		"name": "PWW - Python Web Workshop API",
		"description": "Collection di test per il progetto PWW (Python Web Workshop)\n\nEndpoint disponibili:\n- GET /api/hello/ - Endpoint di test base\n\nServer locale: http://127.0.0.1:8000",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42912126"
	},
	"item": [
		{
			"name": "API Tests",
			"item": [
				{
					"name": "Hello World - GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test che la risposta sia 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test che la risposta sia JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test che contenga il campo 'message'",
									"pm.test(\"Response has message field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Test che contenga il campo 'method'",
									"pm.test(\"Response has method field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('method');",
									"    pm.expect(jsonData.method).to.eql('GET');",
									"});",
									"",
									"// Test che contenga il campo 'path'",
									"pm.test(\"Response has path field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('path');",
									"});",
									"",
									"// Test tempo di risposta < 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/hello/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hello",
								""
							]
						},
						"description": "Endpoint di test base che risponde con un messaggio JSON.\n\nRisposta attesa:\n```json\n{\n    \"message\": \"Hello from PWW API!\",\n    \"method\": \"GET\",\n    \"path\": \"/api/hello/\"\n}\n```"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/hello/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"hello",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Hello from PWW API!\",\n    \"method\": \"GET\",\n    \"path\": \"/api/hello/\"\n}"
						}
					]
				},
				{
					"name": "Server Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test che il server risponda",
									"pm.test(\"Server is running\", function () {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"// Test tempo di risposta",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/hello/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hello",
								""
							]
						},
						"description": "Verifica che il server Django sia attivo e risponda correttamente."
					},
					"response": []
				},
				{
					"name": "Invalid Endpoint - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test che ritorni 404 per endpoint non esistente",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test che la risposta sia JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/invalid-endpoint/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invalid-endpoint",
								""
							]
						},
						"description": "Test per verificare che endpoint non esistenti ritornino 404."
					},
					"response": []
				},
				{
					"name": "Method Not Allowed - POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test che ritorni 405 per metodo non permesso",
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"// Test che la risposta contenga info sull'errore",
									"pm.test(\"Response contains error info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"test\": \"data\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/hello/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hello",
								""
							]
						},
						"description": "Test per verificare che metodi HTTP non permessi ritornino 405.\n\nL'endpoint /api/hello/ accetta solo GET, quindi POST deve fallire."
					},
					"response": []
				}
			],
			"description": "Test per gli endpoint API del progetto PWW"
		},
		{
			"name": "Admin Panel",
			"item": [
				{
					"name": "Admin Login Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test che la pagina admin sia raggiungibile",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test che sia HTML",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								""
							]
						},
						"description": "Verifica che il pannello admin di Django sia accessibile.\n\nNota: Per accedere serve un superuser creato con:\n```bash\npython manage.py createsuperuser\n```"
					},
					"response": []
				}
			],
			"description": "Test per il pannello admin di Django"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script eseguito prima di ogni request",
					"console.log('Request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script eseguito dopo ogni request",
					"console.log('Response status: ' + pm.response.code);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
}